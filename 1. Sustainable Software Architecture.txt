# 1. SUSTAINABLE SOFTWARE ARCHITECTURE
--------------------------------------

* Software architecture and sustainability
------------------------------------------

* Architecture and Sustainability
---------------------------------
Software architecture is the structure of a software product.

This includes elements, the externally visible properties of the elements, and the relationships between the elements.

. In Java Terms
---------------
- Java Software has a lot of classes --> Elements.
- Each class has an interface --> Externally visible properties of the classes.
- The classes use each other --> Relationships.


* What is Software Architecture?
--------------------------------
. Every software product has an architecture.

. Lost architecture --> Software archaeology.


* The Focus of Sustainability
-----------------------------
. Profitable investment due to long sustainability.

. Sustainability = Lowest possible maintenance and expansion costs.

			* TECHNICAL DEBT ARISES WHEN FALSE OR SUBOPTIMAL DECISIONS ARE MADE, WHETHER CONSCIOUSLY OR UNCONSCIOUSLY.


* Causes of Technical Debt
--------------------------
. Technology become outdated.

. No knowledge about software architecture.

. Complexity and size of software systems.

. Lack of understanding of management and customers for individual software development.


* Software Development = Unplannable
------------------------------------
. Change of business processes.

. Integration in target organization.

. Rapid technical and economic development.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Impact of technical debt
--------------------------

* Effect of Technical Debt
--------------------------
. Types of technical debt.

. Architectural erosion.

. Increasing maintenance cost.

. Refactorings.

			* WHEN LOOKING FOR SOLUTIONS, THE FIRST THING TO TAKE INTO CONSIDERATIONS IS:
			
				. Test Coverage --> How many automated tests are there for the system?


* Effect of Technical Debt
--------------------------
. Test debt --> Few Automated testing.

. Desing and architecture debt --> Classes, Packages, Layers, modules, are badly cut very complex and inconsistenly structured. --> IN DOMAIN DRIVEN DESIGN WE SAY (THE SYSTEM IS A BIG BALL
OF MUDD).

. Implementation debt --> Long methods, large classes, and many others code smells.  

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Software architecture and cognitive psychology
------------------------------------------------

* Architecture and Cognitive Psychology
---------------------------------------
A software development team must be able to quickly find their way around the source code and its structures as they work.


* How Do We Spend Our Time?
---------------------------
. 70% Understanding code.

. 20% Solving the problem.

. 10% Writting code.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Layering as an architectural style
------------------------------------

* Layered Architecture (Technical Layering)
----------------------

			PRESENTATION LAYER --> APPLICATION LAYER --> DOMAIN LAYER --> INFRASTRUCTURE LAYER

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* With modularity against technical debt
----------------------------------------

* Modularity
------------
			* High Cohesion + loose coupling --> HIGH MODULARITY

			* Separation of Concerns

			* Single responsibility principle

		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Design Patterns against technical debt
----------------------------------------

			* PLEASE USE THE RIGHT PATTERNS IN THE RIGHT LAYERS

-------------------------------------------------------------------------------------------------------------------------------------------------------------------














































			 



























































